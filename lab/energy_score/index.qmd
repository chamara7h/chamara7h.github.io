---
title: "Evaluating Probabilistic Forecasts with Energy Score"
description: "Tutorial"
author: "Harsha Chamara Hewage"
date: "2025-03-17"
image: "point_vs_prob.jpg"
categories:
  - Forecasting
  - Scoring Rules
  - R
link-external-newwindow: true
format:
  html:
    toc: true
    toc-depth: 2
    number-sections: false
---


```{=html}
<style>
/* FONT IMPORT */
@import url('[https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap](https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap)');

/* GENERAL STYLING */
body {
  font-family: 'Assistant', sans-serif;
  background-color: #f9f9f9;
}

/* HERO SECTION */
.hero-section {
  background-color: #1a2b48; /* Dark Navy Blue */
  color: #ffffff;
  padding: 60px 20px;
  text-align: center;
  border-radius: 10px;
  margin-top: 20px;
  margin-bottom: 40px;
}
.hero-section h1 {
  font-size: 2.8em;
  font-weight: 700;
  margin-bottom: 10px;
}
.hero-section .description {
  font-size: 1.2em;
  max-width: 700px;
  margin: 0 auto 30px auto;
  opacity: 0.9;
}
.hero-section .author-date {
  font-size: 1em;
  color: #ccc;
}

/* CALL-TO-ACTION BUTTONS */
.cta-buttons {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 15px;
  margin-top: 30px;
}
.btn-custom {
  padding: 12px 25px;
  font-size: 1em;
  font-weight: 600;
  text-decoration: none;
  border-radius: 8px;
  transition: all 0.3s ease;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}
.btn-primary {
  background-color: #0A4C6A; /* Professional Teal/Blue */
  color: #fff;
  border: 2px solid #0A4C6A;
}
.btn-primary:hover {
  background-color: #083c54;
  border-color: #083c54;
  transform: translateY(-2px);
}
.btn-secondary {
  background-color: transparent;
  color: #fff;
  border: 2px solid #fff;
}
.btn-secondary:hover {
  background-color: #fff;
  color: #1a2b48;
  transform: translateY(-2px);
}


/* CONTENT SECTION STYLING */
.content-section {
  background-color: #ffffff;
  padding: 40px;
  border-radius: 10px;
  margin-bottom: 40px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}
/* We remove the h2 styling from the generic content section
   to let Quarto's markdown headings take precedence */

</style>

<!-- Add Font Awesome for icons -->
<link rel="stylesheet" href="[https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css](https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css)">

```

```{r}
#| label: setup
#| context: setup
#| include: false

# 1. list your CRAN packages
required_packages <- c(
  "tidyverse",
  "scoringRules",
  'MASS'
)

# 2. install any that are missing
new_packages <- required_packages[!required_packages %in% installed.packages()[, "Package"]]
if (length(new_packages)) {
  install.packages(new_packages)
}

# 3. load them
invisible(lapply(required_packages, library, character.only = TRUE))

```

```{=html}

<div class="hero-section">
  <h1 class="title">Evaluating Probabilistic Forecasts with Energy Score</h1>
  <p class="description">A tutorial on using scoring rules for probabilistic forecasts.</p>
  <p class="author-date">Harsha Chamara Hewage | 2025-03-17</p>
</div>

<div class="content-section">

```

# Introduction

Accurately forecasting the demand for pharmaceutical products is crucial for optimizing inventory management and ensuring continuous availability. Traditional point forecasts provide a single predicted value but fail to capture the uncertainty inherent in real-world scenarios. Probabilistic forecasting addresses this by offering a range of possible outcomes with associated probabilities, enabling better decision-making in supply chain management.

# Deterministic vs. Probabilistic Forecasting

**Deterministic (Point) Forecasting** predicts a specific value for future demand. For example, forecasting that the demand for a specific drug next month will be 500 units. While straightforward, this approach does not convey the uncertainty or variability in demand, which can lead to stockouts or overstocking.

**Probabilistic Forecasting**, on the other hand, provides a distribution of possible demand outcomes. Instead of a single number, it might predict that thereâ€™s a 70% chance that demand will be between 480 and 520 units. This approach acknowledges uncertainty and enables supply chain planners to make more informed inventory decisions.

*Example: Demand Forecast for a Pharmaceutical Drug*

![](point_vs_prob.jpg)
The first graph shows a deterministic forecast, which provides a single predicted demand value for the future but does not convey uncertainty. The second graph presents a probabilistic forecast, illustrating possible future paths, helping businesses plan for variability.

# Understanding the Energy Score

To evaluate the quality of probabilistic forecasts, we use scoring rules. The Energy Score (ES) is particularly useful for assessing both univariate and multivariate forecasts. It measures the accuracy of the predicted distribution compared to the actual observed demand (i.e.,  it quantifies how well the forecasted distribution aligns with the observed value).

## Univariate Energy Score Calculation

For a single time series (one product), the Energy Score (ES) is given by:

$$
    ES(F, y) = \mathbb{E}_F \left[ \|X - y\| \right] - \frac{1}{2} \mathbb{E}_F \left[ \|X - X' \| \right]
$$

where:

- $F$ is the forecasted probability distribution.
- $y$ is the actual observed value.
- $X$ and $X'$ are independent samples from the forecasted distribution.
- $\|\cdot\|$ represents the absolute distance (since we are dealing with univariate values).
- The first term, $\mathbb{E}_F \left[ \|X - y\| \right]$ measures how far the forecasted values are from the observed demand.
- The second term, $\frac{1}{2} \mathbb{E}_F \left[ \|X - X' \| \right]$ accounts for the spread of the forecasted distribution.


Lets take an example from demand for a pharmaceutical product, suppose:

Forecasted samples for Product 1 follow a normal distribution: $X \sim \mathcal{N}(550, 60^2)$

Observed demand: $y = 600$

```{r}
#| echo: false
#| warning: false

# Load necessary libraries
library(ggplot2)


# Simulate a univariate normal forecast
set.seed(123)
forecast_samples <- rnorm(1000, mean = 200, sd = 30)
actual_demand <- 210

# Visualize the forecast distribution and actual demand
ggplot(data = data.frame(Demand = forecast_samples), aes(x = Demand)) +
  geom_histogram(bins = 30, fill = "blue", alpha = 0.5) +
  geom_vline(xintercept = actual_demand, color = "red", linetype = "dashed") +
  labs(x = "Predicted Demand",
       y = "Frequency") +
  theme_minimal() +
  scale_color_manual(name = "Legend", values = c("Actual Demand - Product 1" = "red"))


```
The histogram above shows the distribution of forecasted demands, with the red dashed line indicating the actual observed demand.

**Step-by-Step Calculation**

*Compute the first term: *
$$
\mathbb{E}_F \left[ \|X - y\| \right]
$$

Take the average absolute difference between each forecasted sample and the observed demand (600):

$$
\frac{1}{m} \sum_{i=1}^{m} |X_i - 600|
$$

*Compute the second term: *
$$
\frac{1}{2} \mathbb{E}_F \left[ \|X - X'\| \right]
$$

Take all possible pairs of forecasted samples and compute their absolute differences:

$$
\frac{1}{2m^2} \sum_{i=1}^{m} \sum_{j=1}^{m} |X_i - X_j|
$$

*Compute the Energy Score:*

Subtract the two terms to get the final Energy Score.

We can compute the ES using `scoringRules` package in R ([read more](https://www.rdocumentation.org/packages/scoringRules/versions/1.1.3)).

```{r}

library(scoringRules)

set.seed(123)
forecast_samples_product1 <- rnorm(1000, mean = 550, sd = 60)  # Forecasted demand
actual_demand_product1 <- 600  # Observed demand

# Compute the Energy Score for Product 1
es_univariate <- es_sample(y = actual_demand_product1, dat = matrix(forecast_samples_product1, nrow = 1))
print(paste("Univariate Energy Score:", round(es_univariate, 4)))

```

## Multivariate Energy Score Calculation

For multiple time series (joint demand forecasting), the multivariate Energy Score is:

$$
ES(F, y) = \mathbb{E}_F \left[ \|X - y\| \right] - \frac{1}{2} \mathbb{E}_F \left[ \|X - X'\| \right]
$$

where:

- \( X \) and \( X' \) are now vectors representing forecasted values for both Product 1 and Product 2.
- \( y \) is now a vector containing the actual observed values for both products.
- \( \|\cdot\| \) is the Euclidean distance (not just absolute value) because we now have multiple dimensions.

Suppose we have two products now;

Forecasted distributions:
$$
\begin{bmatrix} X_1 \\ X_2 \end{bmatrix} \sim \mathcal{N} \left( \begin{bmatrix} 550 \\ 320 \end{bmatrix}, \begin{bmatrix} 3600 & 1500 \\ 1500 & 2500 \end{bmatrix} \right)
$$

Observed demand vector:
$$
y = \begin{bmatrix} 600 \\ 280 \end{bmatrix}
$$

```{r}
#| echo: false
#| warning: false

library(ggplot2)
library(dplyr)

# Set seed for reproducibility
set.seed(123)

# Define wider standard deviations for forecast distributions
wider_forecast_sd1 <- 60  # Increased spread for Product 1
wider_forecast_sd2 <- 50  # Increased spread for Product 2

# Generate forecast samples for two pharmaceutical products
wider_forecast_samples_product1 <- rnorm(1000, mean = 550, sd = wider_forecast_sd1)
wider_forecast_samples_product2 <- rnorm(1000, mean = 320, sd = wider_forecast_sd2)

# Actual observed demand
actual_demand_product1 <- 600  # Example reference point
actual_demand_product2 <- 280  # Example reference point

# Create DataFrame for visualization
wider_forecast_df <- data.frame(
  Demand = c(wider_forecast_samples_product1, wider_forecast_samples_product2),
  Product = rep(c("Product 1", "Product 2"), each = 1000)
)

# Plot wider forecast distributions for both products
ggplot(wider_forecast_df, aes(x = Demand, fill = Product)) +
  geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
  geom_density(alpha = 0.3) +  # KDE overlay for smooth distribution
  geom_vline(aes(xintercept = actual_demand_product1, color = "Actual Demand - Product 1"), 
             linetype = "dashed", size = 0.5) +
  geom_vline(aes(xintercept = actual_demand_product2, color = "Actual Demand - Product 2"), 
             linetype = "dashed", size = 0.5) +
  labs(x = "Predicted Demand",
       y = "Frequency") +
  theme_minimal() +
  scale_color_manual(name = "Legend", values = c("Actual Demand - Product 1" = "red", 
                                                 "Actual Demand - Product 2" = "blue"))


```

**Step-by-Step Calculation**

*Compute the first term:*

$$
\mathbb{E}_F \left[ \|X - y\| \right]
$$

Compute the Euclidean distance between each forecast sample and the actual observed demand vector:

$$
\frac{1}{m} \sum_{i=1}^{m} \sqrt{(X_{i,1} - y_1)^2 + (X_{i,2} - y_2)^2}
$$

*Compute the second term:*

$$
\frac{1}{2} \mathbb{E}_F \left[ \|X - X'\| \right]
$$

Compute pairwise Euclidean distances between all forecasted sample pairs:

$$
\frac{1}{2m^2} \sum_{i=1}^{m} \sum_{j=1}^{m} \sqrt{(X_{i,1} - X_{j,1})^2 + (X_{i,2} - X_{j,2})^2}
$$

*Compute the Multivariate Energy Score:*

Subtract the two terms to get the final Multivariate Energy Score.

```{r}
#| warning: false
#| message: false

library(MASS)

# Define number of dimensions and samples
d <- 2  # Number of products
m <- 1000  # Number of forecast samples

# Define mean vector and covariance matrix
mu <- c(550, 320)  
Sigma <- matrix(c(3600, 1500, 
                  1500, 2500), nrow = d, ncol = d)

# Generate forecast samples
demand_forecast_multi <- t(mvrnorm(m, mu = mu, Sigma = Sigma))  

# Define observed demand vector
actual_demand_multi <- c(600, 280)

# Compute the Multivariate Energy Score
es_multivariate <- es_sample(y = actual_demand_multi, dat = demand_forecast_multi)

# Print result
print(paste("Multivariate Energy Score:", round(es_multivariate, 4)))


```

# Key Takeaways

## Interpretation

A lower Energy Score indicates a better probabilistic forecast. Comparing different forecasting models using the Energy Score helps in selecting the model that best represents the underlying demand uncertainty.

## Univariate Energy Score:

- If you compute `es_sample(y, dat)` for a single time series (one product), it returns one scalar value representing the accuracy of that probabilistic forecast compared to the observed value.
- Example: If forecasting demand for Product 1 only, it outputs one Energy Score.

## Multivariate Energy Score:

- When forecasting multiple time series jointly (e.g., multiple products), `es_sample(y, dat)` computes one single Energy Score that evaluates the overall accuracy of the joint probabilistic forecast.
- The forecast considers both marginal distributions (each product's demand) and their dependency structure (correlation between products).

## Key Difference:

| Type | Forecasted Elements | Energy Score Output |
|------|--------------------|----------------------|
| Univariate | One product (single time series) | One Energy Score |
| Multivariate | Multiple products (joint time series) | One Energy Score for all series |

## Why One Value for Multivariate?

- The Energy Score is a proper scoring rule that measures the accuracy of the entire probabilistic distribution of multiple time series.
- It captures how well the forecasted joint distribution matches the observed values across all series.

## Why Euclidean Distance?

- In the **univariate case**, we use absolute difference $|X - y|$ since we are dealing with a single variable.
- In the **multivariate case**, we use Euclidean distance $\|X - y\|$ because we now have multiple variables (e.g., multiple products with correlated forecasts).

When evaluating multiple products together, we must assess how far off the entire forecast vector is from the actual vector. Euclidean distance considers both the magnitude of the forecast errors and their combined effect across multiple dimensions.

- Captures Correlated Forecast Errors.
- Measures Overall Forecast Accuracy Across Multiple Products.

If Product 1 and Product 2 have correlated demand patterns, Euclidean distance captures how well the joint forecast aligns with the observed reality.
A simple sum of absolute differences (like in the univariate case) would ignore these relationships.

## Why Do We Have $\frac{1}{2}$ in the Second Term of the Energy Score Formula?

**Double Counting in Pairwise Distances**

The second term involves taking all pairwise distances between forecasted samples:

$$
\mathbb{E}_F \left[ \|X - X'\| \right] = \frac{1}{m^2} \sum_{i=1}^{m} \sum_{j=1}^{m} \|X_i - X_j\|
$$

where:

- $m$ is the number of forecast samples.
- Each pair $(X_i, X_j)$ is counted twice because we compute distances between all pairs $X_i$ and $X_j$.
- Thus, to avoid over-weighting this term, we include $\frac{1}{2}$ to correct for double counting.

**Maintaining Proper Scale of the Score**

- The Energy Score is designed to measure how concentrated the forecast distribution is around the actual observed value.
- Without the $\frac{1}{2}$, the second term would be too large, making the score too negative, distorting the interpretation.


# Read More

-   [Gneiting, T., & Raftery, A. E. (2007). Strictly proper scoring rules, prediction, and estimation. *Journal of the American Statistical Association*.](https://www.tandfonline.com/doi/abs/10.1198/016214506000001437)

-   [Jordan, A., KrÃ¼ger, F., & Lerch, S. (2019). Evaluating Probabilistic Forecasts with scoringRules. *Journal of Statistical Software*.](https://cran.r-project.org/web/packages/scoringRules/vignettes/article.pdf)
   
